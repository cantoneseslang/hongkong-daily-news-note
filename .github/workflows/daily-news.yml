name: Daily Hong Kong News Generator

on:
  push:
    branches:
      - main
  schedule:
    # 通常実行: UTC 22:00 = HKT 06:00（同日）
    - cron: '0 22 * * *'
  workflow_dispatch:  # 手動実行も可能

# 同時実行を防ぐ
concurrency:
  group: daily-news
  cancel-in-progress: false

permissions:
  contents: write  # リポジトリへの書き込み権限

jobs:
  generate-daily-news:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Hong_Kong  # HKTタイムゾーンを設定
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得（過去記事チェックのため）
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create config.json from secrets
        run: |
          cat > config.json << EOF
          {
            "news_api": {
              "api_key": "${{ secrets.NEWS_API_KEY }}"
            },
            "world_news_api": {
              "api_key": "${{ secrets.WORLD_NEWS_API_KEY }}"
            },
            "newsdata_io": {
              "api_key": "${{ secrets.NEWSDATA_IO_API_KEY }}"
            },
            "grok_api": {
              "api_key": "${{ secrets.GROK_API_KEY }}",
              "api_url": "https://api.x.ai/v1/chat/completions"
            },
            "openai_api": {
              "api_key": "${{ secrets.OPENAI_API_KEY }}",
              "api_url": "https://api.openai.com/v1/chat/completions"
            },
            "gemini_api": {
              "api_key": "${{ secrets.GEMINI_API_KEY }}",
              "api_url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent"
            },
            "note": {
              "state_path": "/tmp/.note-state.json",
              "screenshot_dir": "/tmp/screenshots",
              "timeout": 180000
            },
            "news_sources": {
              "preferred": [
                "scmp.com",
                "thestandard.com.hk",
                "news.rthk.hk",
                "chinadailyhk.com",
                "hk01.com"
              ],
              "excluded": [
                "hongkongfp.com"
              ]
            }
          }
          EOF
          
          # 設定ファイルが正しく作成されたか確認（APIキーは表示しない）
          echo "✅ Config file created"
          if grep -q "\"OPENAI_API_KEY\"" config.json; then
            echo "⚠️  Warning: OPENAI_API_KEY secret may not be set"
          else
            echo "✅ OpenAI API key configured"
          fi
          if grep -q "\"GEMINI_API_KEY\"" config.json; then
            echo "⚠️  Warning: GEMINI_API_KEY secret may not be set"
          else
            echo "✅ Gemini API key configured"
          fi
          if grep -q "\"GROK_API_KEY\"" config.json; then
            echo "⚠️  Warning: GROK_API_KEY secret may not be set"
          else
            echo "✅ Grok API key configured"
          fi
      
      - name: Create necessary directories
        run: |
          mkdir -p daily-articles
          mkdir -p logs
      
      - name: Fetch RSS news
        run: |
          echo "📰 Fetching RSS news..."
          python fetch_rss_news.py
      
      - name: Generate article
        run: |
          echo "✍️  Generating article..."
          
          # 今日の日付を取得（HKTタイムゾーン）
          TODAY=$(TZ='Asia/Hong_Kong' date +"%Y-%m-%d")
          echo "📅 Today's date (HKT): $TODAY"
          
          LATEST_RSS=$(ls -t daily-articles/rss_news_*.json 2>/dev/null | head -1)
          if [ -z "$LATEST_RSS" ]; then
            echo "❌ Error: No RSS news file found"
            exit 1
          fi
          echo "Using RSS file: $LATEST_RSS"
          
          # Pythonスクリプトを実行（エラー出力を表示）
          if ! python -u generate_article.py "$LATEST_RSS" 2>&1; then
            echo "❌ Error: Article generation failed"
            echo "📂 Current files in daily-articles:"
            ls -lh daily-articles/ || true
            exit 1
          fi
          
          # デバッグ: 生成されたファイルを確認
          echo "📂 Files in daily-articles:"
          ls -lh daily-articles/ || true
          
          # 今日の日付の記事ファイルが生成されたか確認
          EXPECTED_ARTICLE="daily-articles/hongkong-news_${TODAY}.md"
          echo "🔍 Checking for today's article: $EXPECTED_ARTICLE"
          
          if [ ! -f "$EXPECTED_ARTICLE" ]; then
            echo "❌ Error: Today's article file not generated: $EXPECTED_ARTICLE"
            echo "📋 Available files:"
            ls -la daily-articles/ || true
            exit 1
          fi
          
          echo "✅ Today's article generated successfully: $EXPECTED_ARTICLE"
      
      - name: Commit and push generated article
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # 生成された記事ファイルのみコミット
          git add daily-articles/hongkong-news_*.md
          
          # 変更があればコミット
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # HKTタイムゾーンで日付を取得（UTC+8）
            ARTICLE_DATE=$(TZ='Asia/Hong_Kong' date +"%Y-%m-%d")
            git commit -m "📰 Daily news: $ARTICLE_DATE [automated]"
            
            # プッシュ（コンフリクト時は自動解決）
            if git push origin main; then
              echo "✅ Article committed and pushed"
            else
              echo "⚠️  Push failed, resolving conflicts..."
              
              # リモートの最新を取得
              git fetch origin main
              
              # コンフリクトが発生した場合、リモートを優先
              git reset --soft origin/main
              
              # ワークフローファイルの変更を除外
              git restore --staged .github/
              
              # 記事ファイルのみを再度追加
              git add daily-articles/hongkong-news_*.md
              
              # 変更があれば再コミット
              if ! git diff --staged --quiet; then
                # HKTタイムゾーンで日付を再取得
                ARTICLE_DATE=$(TZ='Asia/Hong_Kong' date +"%Y-%m-%d")
                git commit -m "📰 Daily news: $ARTICLE_DATE [automated - resolved conflict]"
                git push origin main
                echo "✅ Conflict resolved and pushed"
              else
                echo "ℹ️  No changes to push (article already exists on remote)"
              fi
            fi
          fi
      
      - name: Setup Node.js for note.com posting
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Playwright
        run: |
          echo "📦 Installing Playwright..."
          npm install
          npx playwright install chromium
          echo "✅ Playwright installed"
      
      - name: Post to note.com
        env:
          NOTE_EMAIL: ${{ secrets.NOTE_EMAIL }}
          NOTE_PASSWORD: ${{ secrets.NOTE_PASSWORD }}
          NOTE_AUTH_STATE: ${{ secrets.NOTE_AUTH_STATE }}
        run: |
          echo "📮 Posting to note.com..."
          
          # 今日の日付を取得（HKTタイムゾーン）
          TODAY=$(TZ='Asia/Hong_Kong' date +"%Y-%m-%d")
          echo "📅 Today's date (HKT): $TODAY"
          
          # 今日の日付の記事ファイルを確認
          TODAY_ARTICLE="daily-articles/hongkong-news_${TODAY}.md"
          
          if [ ! -f "$TODAY_ARTICLE" ]; then
            echo "❌ Error: Today's article file not found: $TODAY_ARTICLE"
            echo "📋 Available files:"
            ls -lh daily-articles/ || true
            exit 1
          fi
          
          LATEST_ARTICLE="$TODAY_ARTICLE"
          echo "📄 Article: $LATEST_ARTICLE"
          
          # 認証状態ファイルを作成
          if [ -n "$NOTE_AUTH_STATE" ]; then
            echo "🔑 認証状態を復元中..."
            echo "$NOTE_AUTH_STATE" > /tmp/.note-state.json
            echo "✅ 認証状態を復元しました"
            echo "📄 認証状態ファイルサイズ: $(wc -c < /tmp/.note-state.json) bytes"
          fi
          
          # note.com投稿を実行（公開モード）
          if node note_auto_post.js "$LATEST_ARTICLE" "$NOTE_EMAIL" "$NOTE_PASSWORD" /tmp/.note-state.json --publish; then
            echo "✅ note.com投稿成功"
            
            # 更新された認証状態をシークレットに保存（次の実行用）
            if [ -f /tmp/.note-state.json ]; then
              NEW_AUTH_STATE=$(cat /tmp/.note-state.json)
              echo "💾 新しい認証状態を取得しました（手動でシークレットを更新してください）"
              echo "📄 認証状態ファイルサイズ: $(wc -c < /tmp/.note-state.json) bytes"
            fi
          else
            echo "❌ note.com投稿失敗"
            exit 1
          fi
      
      - name: Summary
        if: always()
        run: |
          echo "=========================================="
          echo "🎉 Daily News Generation Complete"
          echo "=========================================="
          TODAY=$(TZ='Asia/Hong_Kong' date +"%Y-%m-%d")
          TODAY_ARTICLE="daily-articles/hongkong-news_${TODAY}.md"
          if [ -f "$TODAY_ARTICLE" ]; then
            echo "📁 Today's Article: $TODAY_ARTICLE"
          else
            echo "⚠️  Today's article not found: $TODAY_ARTICLE"
            LATEST_ARTICLE=$(ls -t daily-articles/hongkong-news_*.md 2>/dev/null | head -1 || echo "None")
            echo "📁 Latest Article: $LATEST_ARTICLE"
          fi
          echo "📅 Date (HKT): $TODAY"
          echo "⏰ Execution time (UTC): $(date -u)"
          echo "⏰ Execution time (HKT): $(TZ='Asia/Hong_Kong' date)"
          echo "=========================================="

