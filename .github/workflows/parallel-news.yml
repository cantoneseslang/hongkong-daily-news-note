name: Parallel Hong Kong News Generator

on:
  push:
    branches:
      - main
  schedule:
    # 通常実行: UTC 22:00 = HKT 6:00（翌日）
    - cron: '0 22 * * *'
  workflow_dispatch:  # 手動実行も可能

# 同時実行を防ぐ
concurrency:
  group: parallel-news
  cancel-in-progress: false

permissions:
  contents: write  # リポジトリへの書き込み権限

jobs:
  # 1. ニュース取得（並列）
  fetch-news:
    runs-on: ubuntu-latest
    outputs:
      rss-file: ${{ steps.fetch.outputs.rss-file }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create config.json from secrets
        run: |
          cat > config.json << EOF
          {
            "news_api": {
              "api_key": "${{ secrets.NEWS_API_KEY }}"
            },
            "world_news_api": {
              "api_key": "${{ secrets.WORLD_NEWS_API_KEY }}"
            },
            "newsdata_io": {
              "api_key": "${{ secrets.NEWSDATA_IO_API_KEY }}"
            },
            "grok_api": {
              "api_key": "${{ secrets.GROK_API_KEY }}",
              "api_url": "https://api.x.ai/v1/chat/completions"
            },
            "note": {
              "state_path": "/tmp/.note-state.json",
              "screenshot_dir": "/tmp/screenshots",
              "timeout": 180000
            },
            "news_sources": {
              "preferred": [
                "scmp.com",
                "thestandard.com.hk",
                "news.rthk.hk",
                "chinadailyhk.com",
                "hk01.com"
              ],
              "excluded": [
                "hongkongfp.com"
              ]
            }
          }
          EOF
      
      - name: Create necessary directories
        run: |
          mkdir -p daily-articles
          mkdir -p logs
      
      - name: Fetch RSS news
        id: fetch
        run: |
          echo "📰 Fetching RSS news..."
          python fetch_rss_news.py
          LATEST_RSS=$(ls -t daily-articles/rss_news_*.json | head -1)
          echo "rss-file=$LATEST_RSS" >> $GITHUB_OUTPUT
          echo "✅ RSS file: $LATEST_RSS"

  # 2. 記事生成（並列）
  generate-article:
    runs-on: ubuntu-latest
    needs: fetch-news
    outputs:
      article-file: ${{ steps.generate.outputs.article-file }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create config.json from secrets
        run: |
          cat > config.json << EOF
          {
            "news_api": {
              "api_key": "${{ secrets.NEWS_API_KEY }}"
            },
            "world_news_api": {
              "api_key": "${{ secrets.WORLD_NEWS_API_KEY }}"
            },
            "newsdata_io": {
              "api_key": "${{ secrets.NEWSDATA_IO_API_KEY }}"
            },
            "grok_api": {
              "api_key": "${{ secrets.GROK_API_KEY }}",
              "api_url": "https://api.x.ai/v1/chat/completions"
            },
            "note": {
              "state_path": "/tmp/.note-state.json",
              "screenshot_dir": "/tmp/screenshots",
              "timeout": 180000
            },
            "news_sources": {
              "preferred": [
                "scmp.com",
                "thestandard.com.hk",
                "news.rthk.hk",
                "chinadailyhk.com",
                "hk01.com"
              ],
              "excluded": [
                "hongkongfp.com"
              ]
            }
          }
          EOF
      
      - name: Create necessary directories
        run: |
          mkdir -p daily-articles
          mkdir -p logs
      
      - name: Generate article
        id: generate
        run: |
          echo "✍️  Generating article..."
          set -e
          python -u generate_article.py "${{ needs.fetch-news.outputs.rss-file }}" 2>&1 || {
            echo "❌ Error: Article generation failed"
            exit 1
          }
          
          LATEST_ARTICLE=$(ls -t daily-articles/hongkong-news_*.md | head -1)
          echo "article-file=$LATEST_ARTICLE" >> $GITHUB_OUTPUT
          echo "✅ Article generated: $LATEST_ARTICLE"

  # 3. 記事投稿（並列）
  post-to-note:
    runs-on: ubuntu-latest
    needs: generate-article
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js for note.com posting
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Playwright
        run: |
          echo "📦 Installing Playwright..."
          npm install
          npx playwright install chromium
          echo "✅ Playwright installed"
      
      - name: Post to note.com
        env:
          NOTE_EMAIL: ${{ secrets.NOTE_EMAIL }}
          NOTE_PASSWORD: ${{ secrets.NOTE_PASSWORD }}
          NOTE_AUTH_STATE: ${{ secrets.NOTE_AUTH_STATE }}
        run: |
          echo "📮 Posting to note.com..."
          
          if [ -z "${{ needs.generate-article.outputs.article-file }}" ]; then
            echo "❌ Error: No article file found"
            exit 1
          fi
          
          echo "📄 Article: ${{ needs.generate-article.outputs.article-file }}"
          
          # 認証状態ファイルを作成
          if [ -n "$NOTE_AUTH_STATE" ]; then
            echo "🔑 認証状態を復元中..."
            echo "$NOTE_AUTH_STATE" > /tmp/.note-state.json
            echo "✅ 認証状態を復元しました"
          fi
          
          # note.com投稿を実行
          if node note_auto_post.js "${{ needs.generate-article.outputs.article-file }}" "$NOTE_EMAIL" "$NOTE_PASSWORD" /tmp/.note-state.json; then
            echo "✅ note.com投稿成功"
          else
            echo "❌ note.com投稿失敗"
            exit 1
          fi

  # 4. コミット・プッシュ（並列）
  commit-push:
    runs-on: ubuntu-latest
    needs: [generate-article]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Commit and push generated article
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # 生成された記事ファイルのみコミット
          git add daily-articles/hongkong-news_*.md
          
          # 変更があればコミット
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            ARTICLE_DATE=$(date +"%Y-%m-%d")
            git commit -m "📰 Daily news: $ARTICLE_DATE [automated]"
            
            # プッシュ
            if git push origin main; then
              echo "✅ Article committed and pushed"
            else
              echo "⚠️  Push failed, resolving conflicts..."
              git fetch origin main
              git reset --soft origin/main
              git restore --staged .github/
              git add daily-articles/hongkong-news_*.md
              
              if ! git diff --staged --quiet; then
                git commit -m "📰 Daily news: $ARTICLE_DATE [automated - resolved conflict]"
                git push origin main
                echo "✅ Conflict resolved and pushed"
              else
                echo "ℹ️  No changes to push"
              fi
            fi
          fi

  # 5. AI レビュー（並列）
  ai-review:
    runs-on: ubuntu-latest
    needs: [generate-article]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup CodeRabbit
        uses: coderabbitai/coderabbit-action@v0.1.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: .
          language: python,javascript
          review-type: full
          review-options: |
            {
              "reviewType": "full",
              "language": "python,javascript",
              "maxFiles": 10,
              "maxLines": 1000
            }
      
      - name: Setup Bugbot
        uses: bugbot-ai/bugbot-action@v1.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: .
          language: python,javascript
          severity: medium,high,critical
      
      - name: Setup Codex
        uses: codex-ai/codex-action@v1.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: .
          language: python,javascript
          review-type: security,performance,maintainability

  # 6. テスト最適化（並列）
  test-optimization:
    runs-on: ubuntu-latest
    needs: [generate-article]
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run ${{ matrix.test-type }} tests
        run: |
          echo "🧪 Running ${{ matrix.test-type }} tests..."
          # テスト実行ロジック（並列化）
          case "${{ matrix.test-type }}" in
            "unit")
              python -m pytest tests/unit/ -v --tb=short
              ;;
            "integration")
              python -m pytest tests/integration/ -v --tb=short
              ;;
            "e2e")
              python -m pytest tests/e2e/ -v --tb=short
              ;;
          esac
      
      - name: Test performance
        run: |
          echo "⚡ Performance testing..."
          # パフォーマンステスト実行
          python -m pytest tests/performance/ -v --tb=short

  # 7. 最終サマリー
  summary:
    runs-on: ubuntu-latest
    needs: [fetch-news, generate-article, post-to-note, commit-push, ai-review, test-optimization]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "=========================================="
          echo "🎉 Parallel News Generation Complete"
          echo "=========================================="
          echo "📊 Job Results:"
          echo "  - Fetch News: ${{ needs.fetch-news.result }}"
          echo "  - Generate Article: ${{ needs.generate-article.result }}"
          echo "  - Post to Note: ${{ needs.post-to-note.result }}"
          echo "  - Commit Push: ${{ needs.commit-push.result }}"
          echo "  - AI Review: ${{ needs.ai-review.result }}"
          echo "  - Test Optimization: ${{ needs.test-optimization.result }}"
          echo "⏰ Execution time: $(date)"
          echo "=========================================="
